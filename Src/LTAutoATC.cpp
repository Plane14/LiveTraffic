/// @file       LTAutoATC.cpp
/// @brief      Channel to AutoATC traffic
/// @see        https://autoatc.zem-solutions.com/
/// @details    Defines AutoATCConnection:\n
///             Takes AI traffic generated by AutoATC
/// @author     Birger Hoppe
/// @copyright  (c) 2025 Birger Hoppe
/// @copyright  Permission is hereby granted, free of charge, to any person obtaining a
///             copy of this software and associated documentation files (the "Software"),
///             to deal in the Software without restriction, including without limitation
///             the rights to use, copy, modify, merge, publish, distribute, sublicense,
///             and/or sell copies of the Software, and to permit persons to whom the
///             Software is furnished to do so, subject to the following conditions:\n
///             The above copyright notice and this permission notice shall be included in
///             all copies or substantial portions of the Software.\n
///             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
///             THE SOFTWARE.

#include "LiveTraffic.h"

//
// MARK: AutoATC
//

// Constructor
AutoATCConnection::AutoATCConnection () :
LTFlightDataChannel(DR_CHANNEL_AUTOATC, AATC_NAME)
{
    // purely informational
    urlName  = AATC_CHECK_NAME;
    urlLink  = AATC_CHECK_URL;
    urlPopup = AATC_CHECK_POPUP;
}

// virtual thread main function
void AutoATCConnection::Main ()
{
    // This is a communication thread's main function, set thread's name and C locale
    ThreadSettings TS ("LT_AutoATC", LC_ALL_MASK);
    
    while ( shallRun() ) {
        // LiveTraffic Top Level Exception Handling
        try {
            // basis for determining when to be called next
            tNextWakeup = std::chrono::steady_clock::now();
            
            // where are we right now?
            const positionTy pos (dataRefs.GetViewPos());
            
            // If the camera position is valid we can request data around it
            if (pos.isNormal()) {
                // Next wakeup is "refresh interval" from _now_
                tNextWakeup += std::chrono::seconds(dataRefs.GetFdRefreshIntvl());
                
                // fetch data and process it
                if (FetchAllData(pos) && ProcessFetchedData())
                        // reduce error count if processed successfully
                        // as a chance to appear OK in the long run
                        DecErrCnt();
            }
            else {
                // Camera position is yet invalid, retry in a second
                tNextWakeup += std::chrono::seconds(1);
            }
            
            // sleep for FD_REFRESH_INTVL or if woken up for termination
            // by condition variable trigger
            {
                std::unique_lock<std::mutex> lk(FDThreadSynchMutex);
                FDThreadSynchCV.wait_until(lk, tNextWakeup,
                                           [this]{return !shallRun();});
            }
            
        } catch (const std::exception& e) {
            LOG_MSG(logERR, ERR_TOP_LEVEL_EXCEPTION, e.what());
            IncErrCnt();
        } catch (...) {
            LOG_MSG(logERR, ERR_TOP_LEVEL_EXCEPTION, "(unknown type)");
            IncErrCnt();
        }
    }
}


// returns the constant URL to SayIntentions traffic
std::string AutoATCConnection::GetURL (const positionTy &pos)
{
    char szUrl[100];
    snprintf(szUrl, sizeof(szUrl), AATC_URL, pos.lat(), pos.lon());
    return szUrl;
}

// Process response, selecting traffic around us and forwarding to the processing queues
/// @details Data looks like
///          @code
///          {
///            "result":"success",
///            "data":
///            [
///              {
///                "lat":44.83533988577092,
///                "lon":20.28103695046056,
///                "alt":5000,
///                "h":63,
///                "ground":false,
///                "state":"inflight",
///                "ADS-B":"46116337",
///                "cs":"air serbia 4139",
///                "af":"AT72",
///                "icao":"ASL"
///              }
///            ],
///            "timestamp":1748714271217
///          }
///          @endcode
bool AutoATCConnection::ProcessFetchedData ()
{
    // data is expected to be in netData string
    // short-cut if there is nothing
    if ( !netDataPos ) return true;
    
    // Only proceed in case HTTP response was OK
    if (httpResponse != HTTP_OK) {
        IncErrCnt();
        return false;
    }
    
    // now try to interpret it as JSON
    JSONRootPtr pRoot (netData);
    if (!pRoot) { LOG_MSG(logERR,ERR_JSON_PARSE); IncErrCnt(); return false; }
    
    // first get the structre's main object
    const JSON_Object* pObj = json_object(pRoot.get());
    if (!pObj) { LOG_MSG(logERR,ERR_JSON_MAIN_OBJECT); IncErrCnt(); return false; }

    // Check the "result" field first, shall be "success"
    std::string s = jog_s(pObj, AATC_RESULT);
    if (s != AATC_RESULT_SUCCESS) {
        if (s.empty()) {
            LOG_MSG(logERR, "AutoATC delivered no 'result' field in the JSON response");
        } else {
            LOG_MSG(logERR, "AutoATC response is not success, but '%s'",
                    s.c_str());
        }
        IncErrCnt();
        return false;
    }
    
    // Fetch the timestamp next, it serves as timestamp for all plane positions
    double timestamp = jog_n_nan(pObj, AATC_TIMESTAMP);
    if (std::isnan(timestamp)) {
        // we can estimate the timestamp...but it is unexpected
        LOG_MSG(logWARN, "AutoATC delivered no timestamp, assume NOW");
        timestamp = dataRefs.GetSimTime() + dataRefs.GetFdBufPeriod();
    } else {
        // AutoATC sends milliseconds (Java timestamp), convert to seconds:
        timestamp /= 1000.0;
    }
    
    // Get the array of plane data
    const JSON_Array* pArrAc = json_object_get_array(pObj, AATC_DATA);
    if (!pArrAc) {
        LOG_MSG(logERR, "AutoATC did not send a 'data' array with plane data");
        IncErrCnt();
        return false;
    }
    
    // any a/c filter defined for debugging purposes?
    const std::string acFilter ( dataRefs.GetDebugAcFilter() );

    // We need to calculate distance to current camera later on
    const positionTy viewPos = dataRefs.GetViewPos();

    // Process all flights
    for (size_t i = 0; i < json_array_get_count(pArrAc); ++i)
    {
        const JSON_Object* pAc = json_array_get_object(pArrAc, i);
        if (!pAc) continue;
        
        // Key is the AutoATC "ADS-B" number
        LTFlightData::FDKeyTy fdKey (LTFlightData::KEY_AUTOATC,
                                     (unsigned long)jog_sl(pAc, AATC_KEY));
        // not matching a/c filter? -> skip it
        if (!acFilter.empty() && (fdKey != acFilter))
            continue;
        
        // Position
        positionTy pos (jog_n_nan(pAc, AATC_LAT),
                        jog_n_nan(pAc, AATC_LON),
                        jog_l(pAc, AATC_ALT) * M_per_FT,
                        timestamp,
                        jog_l(pAc, AATC_HEADING));
        
        // On ground?
        if (jog_b(pAc, AATC_GND))
            pos.f.onGrnd = GND_ON;

        // from here on access to fdMap guarded by a mutex
        // until FD object is inserted and updated
        std::unique_lock<std::mutex> mapFdLock (mapFdMutex);

        // get the fd object from the map, key is the flight_id,
        // this fetches an existing or, if not existing, creates a new one
        LTFlightData& fd = mapFd[fdKey];

        // also get the data access lock once and for all
        // so following fetch/update calls only make quick recursive calls
        std::lock_guard<std::recursive_mutex> fdLock (fd.dataAccessMutex);
        // now that we have the detail lock we can release the global one
        mapFdLock.unlock();

        // completely new? fill key fields
        if ( fd.empty() )
            fd.SetKey(fdKey);
        
        // -- fill static data --
        LTFlightData::FDStaticData stat;
        stat.acTypeIcao     = jog_s(pAc, AATC_AC_TYPE);
        stat.opIcao         = jog_s(pAc, AATC_OP_ICAO);
        stat.flight         = jog_s(pAc, AATC_CALL_SPOKEN);
        
        // We make up a call sign by the OpIcao and the last word of the spoken call sign, which should be the number
        stat.call           = stat.opIcao + str_last_word(stat.flight);
        
        // -- dynamic data --
        LTFlightData::FDDynamicData dyn;
        dyn.gnd             = pos.IsOnGnd();
        dyn.heading         = pos.heading();
        dyn.ts              = pos.ts();
        dyn.pChannel        = this;
        
        // update the a/c's master data
        fd.UpdateData(std::move(stat), pos.dist(viewPos));
        
        // position is rather important, we check for validity
        if ( pos.isNormal(true) ) {
            fd.AddDynData(dyn, 0, 0, &pos);
        }
        else
            LOG_MSG(logDEBUG,ERR_POS_UNNORMAL,fdKey.c_str(),pos.dbgTxt().c_str());
    }
    
    // all good
    return true;
}
