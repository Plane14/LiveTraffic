TODO
===
Globally replace 'aircrafts'

TEST
===
Loading apt.dat currently uses just getline
- Test on Windows
- Test on Mac with Windows file
- Test on Windows using Mac file


DOCUMENTATION
===========

Acceleration / Deceleration
----------------------------
Also see Deceleration.psd
Correct point to start decelaration tx
Distance travelled and start/target time are given as per flight data
Distance(area) = distance with const initial speed + distance with decelaration
Distance with decelaration has two parts:
1. The area (rectangular) "under" target speed
2. The area (triangular) between target and initial speed

distance traveled = d
initial speed = vi
target speed = vt
delta speed = ∆v = [vt-vi]          // negative in case of deceleration!
initial time = ti
target time = tt
delta time = ∆t = [tt-ti]
time to start deceleration = tx    <-- looking for this value

    d = vi * [tx-ti]  +  (vt * [tt-tx] + (-∆v) * [tt-tx] / 2)
      = vi * ∆t       -  (-∆v) * [tt-tx] / 2    // decel: from entire rectangle=distance remove the triangle not traveled due to deceleration in the top right corner
      = vi * ∆t       +  ∆v * [tt-tx] / 2       // accel: to the rectangle made up of the initial speed add the triangle traveled faster due to acceleration
⇔  d - vi * ∆t   =  ∆v/2 * tt  -  ∆v/2 * tx
⇔  d - vi * ∆t   -  ∆v/2 * tt  =  -∆v/2 * tx
⇔  -2/∆v * (d - vi * ∆t - ∆v/2 * tt)  =  tx
⇔   2/∆v * (-d + vi * ∆t + ∆v/2 * tt)  =  tx
⇔  tx =  2/∆v * (vi * ∆t + ∆v/2 * tt - d)


LIBRARIES
========
libz / zlib - https://zlib.net/zlib_license.html
    Not actually built individually, comes with OS and/or with libpng.

CURL - https://curl.haxx.se/download.html
    Downloaded latest Source Archive

    * Windows *
    Used Visual Studio to open
        projects\Windows\VC15\lib\libcurl.sln
    Built the solution for targets
        'LIB Debug - DLL Windows SSPI' / 'x64':     build\Win64\VC15\LIB Debug - DLL Windows SSPI\libcurld.lib
        'LIB Release - DLL Windows SSPI' / 'x64'    build\Win64\VC15\LIB Release - DLL Windows SSPI\libcurl.lib

    * Mac OS *
    Build using the script MacOSX-Framework64Lib provided here in the docs folder,
    which creates a 64 Bit static library.

libpng - http://www.libpng.org/pub/png/libpng.html
    Download latest Source code

    * Windows *
    Used Visual Studio to open
        projects\vstudio\vstudio.sln
    Built the projects 'zlib' and 'libpng' for targets
        'Debug Library' / 'x64':    projects\vstudio\x64\Debug Library\libpng64.lib     and zlib.lib
        'Release Library' / 'x64':  projects\vstudio\x64\Release Library\libpng64.lib   and zlib.lib

    * Mac OS *
    Used the provided projects/xcode/libpng.xcodeproj,
    changed from shared to static library.

xplanemp - Created my own fork at https://github.com/TwinFan/libxplanemp, which includes
	- processing of VERT_OFFSET commands in xsb_aircraft.txt
	- changes to reduce warnings
	- a CMakeSettings.json file to help the Visual Studio CMake system
    Had to download GL/glext.h and KHR/khrplatform.h from
    https://github.com/KhronosGroup/OpenGL-Registry/tree/master/api/GL
    https://github.com/KhronosGroup/EGL-Registry/tree/master/api/KHR
	and provided it in central include directories

    * Windows *
    Used Visual Studio to open the folder libxplanemp and used the CMake build system.
    Defined following variables in CMakeSettings.json:
	- XPSDK_DIR to point to the XPLM SDK
	- ADDITIONAL_INCLUDES (new with my fork) to point to additional include directories, in my case to where libpng, GL, KHR includes are located

    Built the targets
        'x64-Debug':    build\x64-Debug\xplanemp.lib
        'x64-Release':  build\x64-Release\xplanemp.lib

    * Mac OS *
    

X-Plane API - Download latest version from https://developer.x-plane.com/sdk/plugin-sdk-downloads/

parson - https://github.com/kgabis/parson
	Download latest version and take over parson.c/.h into the project.
	It is compiled as part of LiveTraffic, not separately.

DEBUGGER
=======
XCode Summary Formats:
positionTy:     lat={$VAR.v.__begin_[0]} lon={$VAR.v.__begin_[1]} alt={$VAR.v.__begin_[2]}m ts={$VAR.v.__begin_[3]} head={$VAR.v.__begin_[4]}
iterator of positionTy:
                lat={$VAR.__ptr_.v.__begin_[0]} lon={$VAR.__ptr_.v.__begin_[1]} alt={$VAR.__ptr_.v.__begin_[2]}m ts={$VAR.__ptr_.v.__begin_[3]} head={$VAR.__ptr_.v.__begin_[4]}
MovingParam:    val={$VAR.val} [{$VAR.valFrom} -> {$VAR.valTo} @ {$VAR.timeTo}]
AccelParam:     {$VAR.currSpeed_m_s}m/s [{$VAR.startSpeed} -> {$VAR.targetSpeed} @ {$VAR.targetTime}]
VectorTy:       angle={$VAR.angle} dist={$VAR.dist} vsi={$VAR.vsi} speed={$VAR.speed}
LTAircraft:     icaoInt = {$VAR.fd.transpIcaoInt}, phase = {$VAR.phase}, {$VAR.speed}kt, {$VAR.vsi}ft/min
FDDynamicData:  head={$VAR.heading} spd={$VAR.spd} vsi={$VAR.vsi} ts={$VAR.ts}
cycleInfo:      simTime={$VAR.simTime}
